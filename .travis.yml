---
sudo: required

env:
  global:
    - container_id: $(mktemp)
    - role: /etc/ansible/roles/role_under_test
    - test_playbook: ${role}/test.yml
    - docker_image: bertvv/ansible-testing

  matrix:
    - distribution: centos
      version: 7
      init: /usr/lib/systemd/systemd
      run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    - distribution: centos
      version: 6
      init: /sbin/init
      run_opts: ""
    - distribution: ubuntu
      version: 14.04
      init: /sbin/init
      run_opts: ""

services:
  - docker

before_install:
  - sudo apt-get update
  # Pull container
  - 'sudo docker pull ${docker_image}:${distribution}_${version}'

  # Customize container
  #- 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'

script:
   # Run container in detached state
  - >
    sudo docker run --detach --volume="${PWD}:${role}:ro" ${run_opts}
    ${docker_image}:${distribution}_${version} "${init}" > "${container_id}"

  # Check the role/playbook's syntax.
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm
    ansible-playbook ${test_playbook} --syntax-check

  # Run the role/playbook with ansible-playbook.
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm
    ansible-playbook ${test_playbook}

  # What happens here in Travis/Docker @second run?
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm
    ansible-playbook ${test_playbook}

  # Run the role/playbook again, checking to make sure it's idempotent.
  - >
    sudo docker exec "$(cat ${container_id})" ansible-playbook ${test_playbook}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Docker clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  email: false